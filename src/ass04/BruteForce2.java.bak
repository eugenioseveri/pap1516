package ass04;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

public class BruteForce {
	
	private final static int cpuNum = Runtime.getRuntime().availableProcessors();
	private final static byte minPrintableAsciiChar = 32;
	private final static byte maxPrintableAsciiChar = 127;
	/* "loadForEachThread"
	 * Calcolo suddivisione lavoro in base al numero di core disponibili. Nel caso in cui
	 * il numero di caratteri non sia perfettamente divisibile per il numero di core, il
	 * carico sarà leggermente sbilanciato tra i thread. Tuttavia tale sbilanciamento
	 * impatterebbe sulle performance in maniera marginale e solo nel caso pessimo,
	 * nel quale si rende necessario provare tutte le 96^n combinazioni, mentre nel caso
	 * medio ((96^n)/2) non sarà presente alcun rallentamento sul finire dell'elaborazione.
	*/
	private final static byte loadForEachThread = (byte) ((maxPrintableAsciiChar - minPrintableAsciiChar + 1) / cpuNum);
	private static byte passwordSize = 0;
	//private static List<Character> alphabet = new ArrayList<Character>();
	private final static char[] alphabet = new char[(maxPrintableAsciiChar - minPrintableAsciiChar + 1)];
	private static SecureSystem mySecSys;
	private static long startTime; // Tempo preso prima dell'inizio dell'elaborazione, per misurare la velocità d'esecuzione
	
	public static void main(String[] args) {
		// Acquisizione lunghezza password (passata come parametro)
		try {
			passwordSize = Byte.parseByte(args[0]);
		} catch (ArrayIndexOutOfBoundsException ex) {
			System.out.println("Lunghezza password non passata come parametro!");
			System.exit(1);
		} catch (NumberFormatException ex) {
			System.out.println("La lunghezza della password deve essere un intero!");
			System.exit(1);
		}
		
		// Inizializzazione alfabeto dei caratteri ammissibili
		/*for (int i=minPrintableAsciiChar; i<=maxPrintableAsciiChar; i++) {
			alphabet.add((char) i);
		}*/
		for(byte i=0; i<=(maxPrintableAsciiChar-minPrintableAsciiChar); i++) {
			alphabet[i] = (char) (i + minPrintableAsciiChar);
		}
		
		// Creazione oggetto SecureSystem
		mySecSys = new SecureSystem(passwordSize);
		
		startTime = System.currentTimeMillis();
		
		// Creazione dei thread
		IntStream.range(0, cpuNum).forEach(threadIndex -> {
			Thread worker = new Thread(() -> {
				calculateDispositions("", passwordSize, (byte) (loadForEachThread*threadIndex)); // Ogni thread inizia a calcolare dal giusto offset
			});
			worker.start(); // Avvia il thread
		});
	}
	
	// Funzione accessoria che calcola tutte le disposizioni dei caratteri ammissibili
	public static void calculateDispositions(String currentPassword, byte passwordSize, byte startOffset) {
	    for (byte i=startOffset; i<alphabet.length; i++) {
	    	currentPassword += alphabet[i];
	    	if (passwordSize == 1) {
	    		if (mySecSys.login(currentPassword)) {
	    			System.out.println("Passowrd individuata: " + currentPassword + " da " + Thread.currentThread().getName());
	    			System.out.println("Tempo di esecuzione: "+ (System.currentTimeMillis()-startTime) + " ms");
	    			System.exit(0);
	    		}
	    	} else {
	    		calculateDispositions(currentPassword, (byte) (passwordSize-1), startOffset);
	    	}
	    	currentPassword = currentPassword.substring(0, currentPassword.length() - 1);
	    }
	}
}
